{"version":3,"file":"styles.css","sources":["styles.scss","../../node_modules/zen-grids/sass/_zen-grids.scss","../../node_modules/zen-grids/sass/zen-grids/_grids.scss","../../node_modules/zen-grids/sass/zen-grids/_variables.scss","../../node_modules/zen-grids/sass/zen-grids/_functions.scss","../../node_modules/zen-grids/sass/zen-grids/_flow.scss","../../node_modules/zen-grids/sass/zen-grids/_layout.scss","../../node_modules/zen-grids/sass/zen-grids/_undo.scss","_globals.scss","components/_navbar.scss","components/_record.scss","components/_sentences.scss","components/_status.scss"],"sourcesContent":["/* Import zen grids */\n@import \"../../node_modules/zen-grids/sass/zen-grids\";\n@import \"../fonts/Autopia-Regular/Autopia-Regular-stylesheet.css\";\n//@import \"../../node_modules/zen-grids/background\";\n\n@import \"globals\";\n\n@import \"components/navbar\";\n@import \"components/record\";\n@import \"components/sentences\";\n@import \"components/status\";\n","// Import the partials for Zen Grids.\n\n@import \"zen-grids/grids\";\n@import \"zen-grids/flow\";\n@import \"zen-grids/layout\";\n@import \"zen-grids/undo\";\n","// Grids module\n//\n// The “grids” module contains most of the configurable variables and mixins you’ll need to create a layout.\n//\n// Weight: -10\n//\n// Style guide: grids\n\n// Import the global variables needed by all of Zen Grids.\n@import \"./variables\";\n// Import the helper functions.\n@import \"./functions\";\n\n// zen-rtl()\n//\n// Includes inline Right-To-Left language support if the `$zen-rtl-selector` variable is set to `[dir=\"rtl\"]` or some other useful CSS selector.\n//\n// Since `$zen-rtl-selector` defaults to `false`, inline Right-To-Left language support is off by default.\n//\n// $selector = $zen-rtl-selector - The RTL selector for this grid item. See the docs for [`$zen-rtl-selector`](section-grids.html#kssref-grids-variables-rtl-zen-rtl-selector).\n//\n// weight: 20\n//\n// Style guide: grids.zen-rtl\n\n@mixin zen-rtl($selector: $zen-rtl-selector) {\n  @if $selector {\n    @if & {\n      #{$selector} & {\n        @content;\n      }\n    }\n    @else {\n      #{$selector} {\n        @content;\n      }\n    }\n  }\n}\n\n// zen-grid-container()\n//\n// Apply this to create a grid container element.\n//\n// If this grid is nested inside another grid, the `$context` parameter can be used to align the nested grid with the parent grid. `$context` can be set to `none` (the default), `grid-item`, or `flow`.\n//\n// If the nested grid’s container is a child element of the parent grid’s grid item, set `$context: flow`.\n//\n// Otherwise, if the nested grid’s container is the same element as the parent grid’s grid item, set `$context: grid-item` and apply this mixin *after* the [`zen-grid-item()`](#kssref-grids-zen-grid-item) mixin is applied for the parent grid. This mixin removes any gutters on the container since the nested grid will have its own gutters.\n//\n// Common usage:\n// ```\n// @include zen-grid-container();\n// ```\n// or:\n// ```\n// @include zen-grid-container(grid-item);\n// ```\n//\n// $context            = none - If this grid is nested inside another grid, the `$context` parameter can be used to align the nested grid with the parent grid. It can be set to `none`, `grid-item`, or `flow`.\n// $gutters            = $zen-gutters - The width of the gutters for this container. See the docs for [`$zen-gutters`](section-grids.html#kssref-grids-variables-zen-gutters).\n// $gutter-method      = $zen-gutter-method - The gutter method to use for this container. See the docs for [`$zen-gutter-method`](section-grids.html#kssref-grids-variables-zen-gutter-method).\n// $direction          = $zen-direction - The direction to use for this container. See the docs for [`$zen-direction`](section-grids.html#kssref-grids-variables-rtl-zen-direction).\n// $switch-direction   = $zen-switch-direction - Whether to switch the default direction for this container. See the docs for [`$zen-switch-direction`](section-grids.html#kssref-grids-variables-rtl-zen-switch-direction).\n// $rtl-selector       = $zen-rtl-selector - The RTL selector for this container. See the docs for [`$zen-rtl-selector`](section-grids.html#kssref-grids-variables-rtl-zen-rtl-selector).\n//\n// Style guide: grids.zen-grid-container\n@mixin zen-grid-container(\n  $context            : none,\n  $gutters            : $zen-gutters,\n  $gutter-method      : $zen-gutter-method,\n  $direction          : $zen-direction,\n  $switch-direction   : $zen-switch-direction,\n  $rtl-selector       : $zen-rtl-selector\n) {\n\n  $dir: $direction;\n  @if $switch-direction {\n    $dir: zen-direction-switch($dir);\n  }\n\n  @if $context == flow-item {\n    @warn \"zen-grid-container()'s $context cannot be set to: flow-item. It has been set to: flow.\";\n    $context: flow;\n  }\n  @else if $context == grid {\n    @warn \"zen-grid-container()'s $context cannot be set to: grid. It has been set to: grid-item.\";\n    $context: grid-item;\n  }\n\n  // @TODO: This is a pre-IE8 line of code; don't remember why its needed.\n  @if zen-support-for-ie(7) {\n    *position: relative;\n  }\n\n  // We use the \"micro clearfix\", optimized to reduce the number of &.\n  &:before {\n    content: \"\";\n    display: table;\n  }\n  &:after {\n    content: \"\";\n    display: table;\n    clear: both;\n  }\n  @if zen-support-for-ie(7) {\n    *zoom: 1;\n  }\n\n  // Un-do the gutter padding of the parent grid item.\n  @if $context == flow and $gutter-method == padding {\n    margin: {\n      left: -(zen-half-gutter($gutters, left, $dir));\n      right: -(zen-half-gutter($gutters, right, $dir));\n    }\n\n    // If $gutters is an odd number of pixels, we need special RTL handling.\n    @if zen-half-gutter($gutters, left, $dir) != zen-half-gutter($gutters, right, $dir) {\n      @include zen-rtl($rtl-selector) {\n        margin: {\n          left: -(zen-half-gutter($gutters, right, $dir));\n          right: -(zen-half-gutter($gutters, left, $dir));\n        }\n      }\n    }\n  }\n\n  // Prevent any padding from messing up the alignment of the nested grid.\n  @if $context == grid-item or $context == flow {\n    // Copy of undo-zen-apply-gutter-padding()\n    padding: {\n      left: 0;\n      right: 0;\n    }\n  }\n}\n\n// zen-grid-item()\n//\n// Apply this to each grid item. Set the `$column-span` to the number of columns that the grid item spans. And set the `$column-position` to the column number the grid item starts on.\n//\n// To make the grid item float from the right, set the `$direction` to `right`; it defaults to `left` (the value of `$zen-direction`.) For grid items that are floated right, the `$column-position` is counted from the right instead of from the left.\n//\n// Common usage:\n// ```\n// // The grid item spans 2 columns starting from the 3rd column from the left,\n// // e.g. It spans columns 3 and 4 counting from the left.\n// @include zen-grid-item($column-span: 2, $column-position: 3);\n// ```\n// or:\n// ```\n// // The grid item spans 2 columns starting from the 3rd column from the right,\n// // e.g. It spans columns 3 and 4 counting from the right.\n// @include zen-grid-item(2, 3, right);\n// ```\n//\n// $column-span        - Required. The number of columns the grid item will span.\n// $column-position    - Required. The column number the grid item starts on.\n// $direction          = $zen-direction - The floating direction to use for this grid item. See the docs for [`$zen-direction`](section-grids.html#kssref-grids-variables-rtl-zen-direction).\n// $gutters            = $zen-gutters - The width of the gutters for this grid item. See the docs for [`$zen-gutters`](section-grids.html#kssref-grids-variables-zen-gutters).\n// $gutter-method      = $zen-gutter-method - The gutter method to use for this grid item. See the docs for [`$zen-gutter-method`](section-grids.html#kssref-grids-variables-zen-gutter-method).\n// $box-sizing         = $zen-box-sizing - The box sizing to use for this grid item. See the docs for [`$zen-box-sizing`](section-grids.html#kssref-grids-variables-zen-box-sizing).\n// $switch-direction   = $zen-switch-direction - Whether to switch the default direction for this grid item. See the docs for [`$zen-switch-direction`](section-grids.html#kssref-grids-variables-rtl-zen-switch-direction).\n// $rtl-selector       = $zen-rtl-selector - The RTL selector for this grid item. See the docs for [`$zen-rtl-selector`](section-grids.html#kssref-grids-variables-rtl-zen-rtl-selector).\n// $include-base       = $zen-auto-include-grid-item-base - Whether to auto-include the zen-grid-item-base() mixin. See the docs for [`$zen-auto-include-grid-item-base`](section-grids.html#kssref-grids-variables-zen-auto-include-grid-item-base).\n//\n// Style guide: grids.zen-grid-item\n@mixin zen-grid-item(\n  $column-span,\n  $column-position,\n  $direction          : $zen-direction,\n  $columns            : $zen-columns,\n  $gutters            : $zen-gutters,\n  $gutter-method      : $zen-gutter-method,\n  $grid-width         : $zen-grid-width,\n  $box-sizing         : $zen-box-sizing,\n  $switch-direction   : $zen-switch-direction,\n  $rtl-selector       : $zen-rtl-selector,\n  $include-base       : $zen-auto-include-grid-item-base\n) {\n\n  // Calculate the unit width.\n  $unit-width: zen-unit-width($columns, $gutters, $gutter-method, $grid-width);\n\n  // Calculate the item's width.\n  $width: zen-grid-item-width($column-span, $columns, $gutters, $gutter-method, $grid-width, $box-sizing);\n\n  // Calculate the margin from the container's edge.\n  $margin: ($column-position - 1) * $unit-width;\n  @if $gutter-method == margin {\n    $margin: $margin + (floor($column-position) - 1) * $gutters;\n  }\n\n  // Determine the float direction and its reverse.\n  $dir: $direction;\n  @if $switch-direction {\n    $dir: zen-direction-switch($dir);\n  }\n  $rev: zen-direction-switch($dir);\n\n  float: $dir;\n  width: $width;\n  margin: {\n    #{$dir}: $margin;\n    #{$rev}: -100%;\n  }\n  @if zen-support-for-ie(7) {\n    // @TODO: This interpolation fails on libsass 3.3.0: *margin-#{$rev}: -99.9%;\n    #{'*margin-' + $rev}: -99.9%;\n  }\n  @include zen-rtl($rtl-selector) {\n    float: $rev;\n    margin: {\n      #{$rev}: $margin;\n      #{$dir}: -100%;\n    }\n    @if zen-support-for-ie(7) {\n      // @TODO: This interpolation fails on libsass 3.3.0: *margin-#{$rev}: -99.9%;\n      #{'*margin-' + $dir}: -99.9%;\n    }\n  }\n\n  // Include the grid item base mixin.\n  @if $include-base {\n    @include zen-grid-item-base($gutters, $gutter-method, $box-sizing, $direction, $switch-direction, $rtl-selector);\n  }\n  // If the $gutters parameter has been used, set the gutters even if\n  // $include-base is false.\n  @else if $gutters != $zen-gutters and $gutter-method == padding {\n    @include zen-apply-gutter-padding($gutters, $direction, $switch-direction, $rtl-selector);\n  }\n}\n\n// zen-grid-item-base()\n//\n// Applies a standard set of properties for grid items in the layout.\n//\n// See the documentation for the [`$zen-auto-include-grid-item-base`](#kssref-grids-variables-zen-auto-include-grid-item-base) and [`$zen-auto-include-flow-item-base`](section-flow.html#kssref-flow-variables-zen-auto-include-flow-item-base) variables for when to use this mixin.\n//\n// Common usage:\n// ```\n// @include zen-grid-item-base();\n// ```\n//\n// $gutters            = $zen-gutters - The width of the gutters for this grid item. See the docs for [`$zen-gutters`](section-grids.html#kssref-grids-variables-zen-gutters).\n// $gutter-method      = $zen-gutter-method - The gutter method to use for this grid item. See the docs for [`$zen-gutter-method`](section-grids.html#kssref-grids-variables-zen-gutter-method).\n// $box-sizing         = $zen-box-sizing - The box sizing to use for this grid item. See the docs for [`$zen-box-sizing`](section-grids.html#kssref-grids-variables-zen-box-sizing).\n// $direction          = $zen-direction - The floating direction to use for this grid item. See the docs for [`$zen-direction`](section-grids.html#kssref-grids-variables-rtl-zen-direction).\n// $switch-direction   = $zen-switch-direction - Whether to switch the default direction for this grid item. See the docs for [`$zen-switch-direction`](section-grids.html#kssref-grids-variables-rtl-zen-switch-direction).\n// $rtl-selector       = $zen-rtl-selector - The RTL selector for this grid item. See the docs for [`$zen-rtl-selector`](section-grids.html#kssref-grids-variables-rtl-zen-rtl-selector).\n//\n// weight: 10\n//\n// Style guide: grids.zen-grid-item-base\n@mixin zen-grid-item-base(\n  $gutters            : $zen-gutters,\n  $gutter-method      : $zen-gutter-method,\n  $box-sizing         : $zen-box-sizing,\n  $direction          : $zen-direction,\n  $switch-direction   : $zen-switch-direction,\n  $rtl-selector       : $zen-rtl-selector\n) {\n\n  // Specify the padding if the gutter method uses padding.\n  @if $gutter-method == padding {\n    @include zen-apply-gutter-padding($gutters, $direction, $switch-direction, $rtl-selector);\n  }\n\n  // Specify the border-box properties.\n  @if $box-sizing == border-box {\n    -moz-box-sizing: border-box;\n    -webkit-box-sizing: border-box;\n    box-sizing: border-box;\n  }\n  // Prevent left/right borders since they'll break the layout with content-box.\n  @else if $box-sizing == content-box {\n    border: {\n      left: 0 !important;\n      right: 0 !important;\n    }\n    @if $gutter-method == margin {\n      padding: {\n        left: 0 !important;\n        right: 0 !important;\n      }\n    }\n  }\n\n  @if zen-support-for-ie(7) {\n    @if $box-sizing == border-box and $box-sizing-polyfill-path == \"\" {\n      @warn 'Setting $box-sizing to border-box will fail for IE 7 and earlier because the $box-sizing-polyfill-path is empty.';\n    }\n    @if $box-sizing-polyfill-path != \"\" {\n      *behavior: url($box-sizing-polyfill-path);\n    }\n    @if zen-support-for-ie(6) {\n      // Display inline or double your floated margin!\n      // @see http://www.positioniseverything.net/explorer/doubled-margin.html\n      _display: inline;\n      // Prevent overflowing content from breaking the layout.\n      _overflow: hidden;\n      // In IE6, overflow visible is broken.\n      // @see http://www.howtocreate.co.uk/wrongWithIE/?chapter=overflow%3Avisible%3B\n      _overflow-y: visible;\n    }\n    // Prevent overflowing content from being hidden beneath other grid items.\n    *word-wrap: break-word;\n  }\n}\n\n// zen-new-row()\n//\n// Apply this to a grid item so that it starts a new row.\n//\n// Common usage:\n// ```\n// @include zen-new-row();\n// ```\n// or:\n// ```\n// @include zen-new-row(right);\n// ```\n//\n// $clear             = $zen-direction - The floating direction to use for this grid item. See the docs for [`$zen-direction`](section-grids.html#kssref-grids-variables-rtl-zen-direction).\n// $switch-direction  = $zen-switch-direction - Whether to switch the default direction for this grid item. See the docs for [`$zen-switch-direction`](section-grids.html#kssref-grids-variables-rtl-zen-switch-direction).\n// $rtl-selector      = $zen-rtl-selector - The RTL selector for this grid item. See the docs for [`$zen-rtl-selector`](section-grids.html#kssref-grids-variables-rtl-zen-rtl-selector).\n//\n// Style guide: grids.zen-new-row\n@mixin zen-new-row(\n  $clear              : $zen-direction,\n  $switch-direction   : $zen-switch-direction,\n  $rtl-selector       : $zen-rtl-selector\n) {\n  // Determine the clearing direction.\n  @if $switch-direction {\n    $clear: zen-direction-switch($clear);\n  }\n  clear: $clear;\n\n  @if $clear == left or $clear == right {\n    @include zen-rtl($rtl-selector) {\n      clear: zen-direction-switch($clear);\n    }\n  }\n}\n\n// zen-apply-gutter-padding()\n//\n// Applies the gutter to a grid item when using the padding gutter method.\n//\n// Common usage:\n// ```\n// @include zen-apply-gutter-padding();\n// ```\n//\n// $gutters           = $zen-gutters - The width of the gutters. See the docs for [`$zen-gutters`](section-grids.html#kssref-grids-variables-zen-gutters).\n// $direction         = $zen-direction - The floating direction to use. See the docs for [`$zen-direction`](section-grids.html#kssref-grids-variables-rtl-zen-direction).\n// $switch-direction  = $zen-switch-direction - Whether to switch the default direction. See the docs for [`$zen-switch-direction`](section-grids.html#kssref-grids-variables-rtl-zen-switch-direction).\n// $rtl-selector      = $zen-rtl-selector - The RTL selector. See the docs for [`$zen-rtl-selector`](section-grids.html#kssref-grids-variables-rtl-zen-rtl-selector).\n//\n// weight: 30\n//\n// Style guide: grids.zen-apply-gutter-padding\n@mixin zen-apply-gutter-padding(\n  $gutters            : $zen-gutters,\n  $direction          : $zen-direction,\n  $switch-direction   : $zen-switch-direction,\n  $rtl-selector       : $zen-rtl-selector\n) {\n\n  $dir: $direction;\n  @if $switch-direction {\n    $dir: zen-direction-switch($dir);\n  }\n\n  padding: {\n    left: zen-half-gutter($gutters, left, $dir);\n    right: zen-half-gutter($gutters, right, $dir);\n  }\n\n  // If $gutters is an odd number of pixels, we need special RTL handling.\n  @if zen-half-gutter($gutters, left, $dir) != zen-half-gutter($gutters, right, $dir) {\n    @include zen-rtl($rtl-selector) {\n      padding: {\n        left: zen-half-gutter($gutters, right, $dir);\n        right: zen-half-gutter($gutters, left, $dir);\n      }\n    }\n  }\n}\n","//\n// Variables module for the Zen Grids system; auto-imported by other modules.\n//\n\n\n\n//\n// Grids Module\n//\n\n// Configurable variables\n//\n// Zen Grids comes with several configuration variables that affect what CSS its mixins and functions output. The default values of these variables are all set using the “guarded assignment” flag, `!default`. So you can safely set those values before you `@import` Zen Grids and your values will be respected.\n//\n// weight: -10\n//\n// Style guide: grids.variables\n\n// $zen-columns\n//\n// Specifies the number of columns in the grid. Defaults to 1 as a hat tip to mobile first designs. You should set this variable each time you want to use a different grid for a set of media queries.\n//\n// ```\n// $zen-columns: 1 !default;\n// ```\n//\n// weight: -2\n//\n// Style guide: grids.variables.zen-columns\n$zen-columns: 1 !default;\n\n// $zen-gutters\n//\n// Specifies the width of each gutter, the horizontal space between two adjacent grid items.\n//\n// For a sense of aesthetics, we suggest this value could be proportional to your base font by setting `$zen-gutters` equal to a multiple of your base line height.\n//\n// If the [`$zen-gutter-method`](#zen-gutter-method) is set to `margin`, the unit of measurement of the gutters should be the same as the unit of measurement of the [`$zen-grid-width`](#zen-grid-width), e.g. if `$zen-grid-width: 100%`, then `$zen-gutters` should also be measured in `%`.\n//\n// ```\n// $zen-gutters: 20px !default;\n// ```\n//\n// weight: -2\n//\n// Style guide: grids.variables.zen-gutters\n$zen-gutters: 20px !default;\n\n// $zen-gutter-method\n//\n// Specifies the type of gutters used for the grid, can be set to `padding` (the default) or `margin`.\n// If the “padding” gutter method is chosen, half of the gutter will be placed on each side of a grid item (as padding). This means there will be a full gutter between the content of adjacent grid items and half of a gutter on each edge of the grid.\n//\n// <figure class=\"ex-gutter-method ex-gutter-method-padding\">\n//   <div class=\"ex-gutter-method__container\">\n//     <div class=\"ex-gutter-method__content ex-gutter-method__content-1\">\n//       <p>A grid item.</p>\n//     </div>\n//     <div class=\"ex-gutter-method__content ex-gutter-method__content-2\">\n//       <p>A grid item.</p>\n//     </div>\n//     <div class=\"ex-gutter-method__content ex-gutter-method__content-3\">\n//       <p>A grid item.</p>\n//     </div>\n//   </div>\n// </figure>\n//\n// If the “margin” gutter method is chosen, a full gutter will be placed between each grid item (as margin), but no gutter will be placed on each edge of the grid.\n//\n// <figure class=\"ex-gutter-method ex-gutter-method-margin\">\n//   <div class=\"ex-gutter-method__container\">\n//     <div class=\"ex-gutter-method__content ex-gutter-method__content-1\">\n//       <p>A grid item.</p>\n//     </div>\n//     <div class=\"ex-gutter-method__content ex-gutter-method__content-2\">\n//       <p>A grid item.</p>\n//     </div>\n//     <div class=\"ex-gutter-method__content ex-gutter-method__content-3\">\n//       <p>A grid item.</p>\n//     </div>\n//   </div>\n// </figure>\n//\n// Note: that the “margin” gutter method requires that the gutters and the width of the grid have the same unit of measurement, e.g. both be measured in `%` or both in `px`. This means that a fluid, responsive layout using the “margin” gutter method will have gutters that are `%`-based. This is why the default gutter method is “padding”; the grid can be `%`-based, while the gutters remain a fixed measurement (like `20px` or `5 em`) at all viewport sizes.\n//\n// ```\n// $zen-gutter-method: padding !default;\n// ```\n//\n// weight: -1\n//\n// Style guide: grids.variables.zen-gutter-method\n$zen-gutter-method: padding !default;\n\n// $zen-auto-include-grid-item-base\n//\n// You can generate more efficient CSS if you set this to `false` and manually apply the [`zen-grid-item-base()`](#zen-grid-item-base) mixin to all grid items (and flow items) from within a single ruleset.\n//\n// ```\n// $zen-auto-include-grid-item-base: true !default;\n// ```\n//\n// Style guide: grids.variables.zen-auto-include-grid-item-base\n$zen-auto-include-grid-item-base: true !default;\n\n// $zen-box-sizing\n//\n// Specify the CSS3 box-sizing method. The default, \"border-box\", is compatible with all modern browsers, including IE 8 and later.\n//\n// Some developers use a universal selector to apply CSS’s “border-box” box sizing to all elements. Paul Irish describes this method in more detail in his blog post “[* { Box-sizing: Border-box } FTW](http://www.paulirish.com/2012/box-sizing-border-box-ftw/)”. Since Zen Grids will automatically add `box-sizing: border-box;` to those elements that need it, you can prevent it from outputting redundant `box-sizing` properties by setting `$zen-box-sizing` to `universal-border-box`.\n//\n// To add IE6 and IE7 support, you’ll need to set [`$support-for`](#support-for) to `(ie: 6)` and then either use a polyfill (see [`$box-sizing-polyfill-path`](#box-sizing-polyfill-path)) or set `$zen-box-sizing` to \"content-box\".\n//\n// Note: if `$zen-box-sizing` is set to \"content-box\", then [`$zen-gutters`](#zen-gutters) will need to use the same unit of measurement as the [`$zen-grid-width`](#zen-grid-width).\n//\n// ```\n// $zen-box-sizing: border-box !default;\n// ```\n//\n// weight: 1\n//\n// Style guide: grids.variables.zen-box-sizing\n$zen-box-sizing: border-box !default;\n\n\n//\n// Grids Module: fixed variables\n//\n\n// Adaptive or fixed design variable\n//\n// Weight: 10\n//\n// Style guide: grids.variables.fixed\n\n// $zen-grid-width\n//\n// Specify the width of the entire grid. Defaults to `100%` for a fluid responsive design, but you can change this to any fixed value (using px or em, etc.) if you need a fixed grid.\n//\n// ```\n// $zen-grid-width: 100% !default;\n// ```\n//\n// Style guide: grids.variables.fixed.zen-grid-width\n$zen-grid-width: 100% !default;\n\n\n//\n// Grids Module: rtl variables\n//\n\n// RTL language variables\n//\n// Weight: 15\n//\n// Style guide: grids.variables.rtl\n\n// $zen-direction\n//\n// Specify the default floating direction for zen grids’ mixins. If you are only building RTL layouts (and not LTR layouts), you should set this to `right`.\n//\n// ```\n// $zen-direction: left !default;\n// ```\n//\n// Style guide: grids.variables.rtl.zen-direction\n$zen-direction: left !default;\n\n// $zen-rtl-selector\n//\n// If you wish to output both LTR layouts and RTL layouts simultaneously, you can specify the parent selector that should be used to trigger an RTL override for any of Zen Grids' direction-specific CSS.\n//\n// For example, setting this:\n// ```\n// $zen-rtl-selector: '[dir=\"rtl\"]';\n// ```\n//\n// After building a layout with Zen Grids' mixins, the CSS output will look similar to this:\n// ```\n// .my-layout-column {\n//   margin-left: 20%;\n//   margin-right: -100%;\n// }\n// [dir=\"rtl\"] .my-layout-column {\n//   margin-left: -100%;\n//   margin-right: 20%;\n// }\n// ```\n//\n// ```\n// $zen-rtl-selector: false !default;\n// ```\n//\n// Style guide: grids.variables.rtl.zen-rtl-selector\n$zen-rtl-selector: false !default;\n\n// $zen-switch-direction\n//\n// Reverse the floating direction in all of zen grids’ mixins.\n//\n// If you are creating LTR and RTL layouts that are in separate style sheets, this helper variable can be used to automatically create one set of layouts based on the other set of layouts. For example:\n//\n// ```\n// $zen-switch-direction: true;\n// @import \"an-LTR-layout\";\n// ```\n//\n// In the above example, the existing LTR layout in the an-LTR-layout.scss file is used to create the corresponding RTL layout by first setting the `$zen-switch-direction` variable to `true` and then importing the LTR layout file.\n//\n// ```\n// $zen-switch-direction: false !default;\n// ```\n//\n// Style guide: grids.variables.rtl.zen-switch-direction\n$zen-switch-direction: false !default;\n\n\n//\n// Grids Module: legacy IE variables\n//\n\n// Legacy IE support variables\n//\n// IE 6 and 7 require special CSS properties in order for Zen Grids to work with\n// such old browsers.\n//\n// If you need IE 6/7 support, you will need to install:\n//\n// 1. [support-for]() Sass module\n// 2. [box-sizing polyfill](https://github.com/Schepp/box-sizing-polyfill)'s boxsizing.htc\n//\n// Weight: 20\n//\n// Style guide: grids.variables.legacy\n\n// $box-sizing-polyfill-path\n//\n// The box-sizing polyfill for IE 6/7 requires an absolute path to the boxsizing.htc file. See https://github.com/Schepp/box-sizing-polyfill\n//\n// ```\n// $box-sizing-polyfill-path: '' !default;\n// ```\n//\n// Style guide: grids.variables.legacy.box-sizing-polyfill-path\n$box-sizing-polyfill-path: '' !default;\n\n// $support-for\n//\n// Specify the minimum browser versions that must be supported. Currently, Zen Grids only uses the `ie` value to determine if additional CSS properties are needed for IE 6 and IE 7 support. For example, to add support for IE 7, set `$support-for: (ie: 7);`\n//\n// This variable is _only_ used if the [support-for](https://github.com/JohnAlbin/support-for) module is loaded into your Sass style sheet. Otherwise, legacy IE support will not be included in your layouts. Zen Grids does not require support-for, but will use it if available.\n//\n// ```\n// $support-for: (\n//   chrome:  -4,\n//   edge:    -4,\n//   firefox: -4,\n//   ie:      9,\n//   opera:   -4,\n//   safari:  -4,\n//   '*':     -4,\n// ) !default;\n// ```\n//\n// Weight: -1\n//\n// Style guide: grids.variables.legacy.support-for\n\n\n\n//\n// Flow module\n//\n\n// Configurable variables\n//\n// Zen Grids comes with several configuration variables that affect what CSS its mixins and functions output. The default values of these variables are all set using the “guarded assignment” flag, `!default`. So you can safely set those values before you `@import` Zen Grids and your values will be respected.\n//\n// weight: -10\n//\n// Style guide: flow.variables\n\n// $zen-auto-include-flow-item-base\n//\n// This variable works the same as [`$zen-auto-include-grid-item-base`](./section-grids.html#zen-auto-include-grid-item-base), except it is used for flow items instead of grid items. You can generate more efficient CSS if you set this to `false` and manually apply the `zen-grid-item-base()` mixin to all flow items from within a single ruleset.\n//\n// ```\n// $zen-auto-include-flow-item-base: true !default;\n// ```\n//\n// Style guide: flow.variables.zen-auto-include-flow-item-base\n$zen-auto-include-flow-item-base: true !default;\n\n\n\n//\n// Layout Module\n//\n\n// Configurable variables\n//\n// Zen Grids comes with several configuration variables that affect what CSS its mixins and functions output. The default values of these variables are all set using the “guarded assignment” flag, `!default`. So you can safely set those values before you `@import` Zen Grids and your values will be respected.\n//\n// weight: -10\n//\n// Style guide: layout.variables\n\n// $zen-layouts\n//\n// A map of layout names and their corresponding properties. Any zen grids variable name can be used as a property of a named layout, but the `zen-` prefix should be removed.\n//\n// For example:\n// ```\n// $zen-layouts: (\n//   medium: (\n//     columns: 3,    // Equivalent of $zen-columns for this layout.\n//     gutters: 15px, // Equivalent of $zen-gutters for this layout.\n//   ),\n// );\n// ```\n//\n// When a named layout is given to the `$layout` parameter of one of the layout module's mixins that layout's properties will be used instead of any global variables for the entirety of the mixin's `@content`.\n//\n// ```\n// $zen-layouts: () !default;\n// ```\n//\n// Style guide: layout.variables.zen-layouts\n$zen-layouts: () !default;\n\n\n\n//\n// Background Module\n//\n\n// Configurable variables\n//\n// Zen Grids comes with several configuration variables that affect what CSS its mixins and functions output. The default values of these variables are all set using the “guarded assignment” flag, `!default`. So you can safely set those values before you `@import` Zen Grids and your values will be respected.\n//\n// weight: -10\n//\n// Style guide: background.variables\n\n// $zen-grid-color\n//\n// Specify the color used in the background grid image produced by the `zen-grid-background()` mixin.\n//\n// ```\n// $zen-grid-color: #ffdede !default;\n// ```\n//\n// Style guide: background.variables.zen-grid-color\n$zen-grid-color: #ffdede !default;\n\n// $zen-grid-numbers\n//\n// Specify how to place the column numbers in the background grid image. Normally, column numbers are displayed across the top of the background grid image and then displayed in reverse order along the bottom of the background grid image. Can be set to: `both`, `top`, or `none`.\n//\n// ```\n// $zen-grid-numbers: both !default;\n// ```\n//\n// Style guide: background.variables.zen-grid-numbers\n$zen-grid-numbers: both !default;\n\n// $zen-grid-number-images\n//\n// Specify the set of images used for the numbering of the columns in the background grid image.\n//\n// The default value of the `$zen-grid-number-images` variable is a list of the numbers 1 through 25, each rendered as an image and encoded as a data URI. Users who are crazy enough to use a 26-column grid or larger are free to extend this set.\n//\n// ```\n// $zen-grid-number-images: (url('data:image/png;base64, …), …) !default;\n// ```\n//\n// Style guide: background.variables.zen-grid-number-images\n$zen-grid-number-images: () !default;\n\n// $display-zen-grid-background\n//\n// Specifies whether the background grid image should be displayed.\n//\n// Since the background grid image is only useful during development and during debugging, we need an easy way to turn off the background grid image without removing all the calls to `zen-grid-background()` from the code base. To turn off all background grid images, set `$display-zen-grid-background` to `false`.\n//\n// ```\n// $display-zen-grid-background: true !default;\n// ```\n//\n// Style guide: background.variables.display-zen-grid-background\n$display-zen-grid-background: true !default;\n","// Helper functions module\n//\n// Helper functions for the Zen Grids mixins.\n//\n// This module contains many Sass functions that you may find useful in your style sheet. These functions are also used internally by all of the mixins in Zen Grids.\n//\n// Weight: 10\n//\n// Style guide: functions\n\n\n@import \"./variables\";\n\n\n// zen-half-gutter()\n//\n// Returns a half gutter width.\n//\n// If the gutter width is in pixels and is an odd number, then `$gutter-side: left` will return half of the gutter rounded down to a whole pixel; `$gutter-side: right` will return half of the gutter rounded up to a whole pixel. The `$gutter-side` defaults to [`$zen-direction`](#zen-direction).\n//\n// Common usage:\n// ```\n// .ex {\n//   property: zen-half-gutter();\n//   // or:\n//   property: zen-half-gutter($gutter-side: [left or right]);\n// }\n// ```\n//\n// $gutters     = $zen-gutters - The width of the gutters. See the docs for [`$zen-gutters`](section-grids.html#kssref-grids-variables-zen-gutters).\n// $gutter-side = $zen-direction - The side of the grid item the gutter is needed for.\n// $direction   = $zen-direction - The direction to use. See the docs for [`$zen-direction`](section-grids.html#kssref-grids-variables-rtl-zen-direction).\n//\n// weight: -1\n//\n// Style guide: functions.zen-half-gutter\n@function zen-half-gutter(\n  $gutters          : $zen-gutters,\n  $gutter-side      : $zen-direction,\n  $direction        : $zen-direction\n) {\n  $half-gutter: $gutters / 2;\n  // Special handling in case gutter has an odd number of pixels.\n  @if unit($gutters) == \"px\" {\n    @if $gutter-side == $direction {\n      @return floor($half-gutter);\n    }\n    @else {\n      @return ceil($half-gutter);\n    }\n  }\n  @return $half-gutter;\n}\n\n// zen-compare-units()\n//\n// Internal function. Warns if the gutter and grid width units are not comparable. It does not throw an `@error` because the line following the call to `zen-compare-units()` will cause a Sass math error with the a line number that is more useful than if it were to fail here.\n//\n// No style guide\n@function zen-compare-units(\n  $feature,\n  $gutters        : $zen-gutters,\n  $grid-width     : $zen-grid-width\n) {\n  @if not comparable($gutters, $grid-width) {\n    $units-gutter: unit($gutters);\n    $units-grid: unit($grid-width);\n    @warn \"The layout cannot be calculated correctly; when using #{$feature}, the units of the gutter (#{$units-gutter} must match the units of the grid width (#{$units-grid}).\";\n    @return false;\n  }\n  @return true;\n}\n\n// zen-unit-width()\n//\n// Returns the unit width of a single column in the grid.\n//\n// Common usage:\n// ```\n// .ex {\n//   property: zen-unit-width();\n// }\n// ```\n//\n// $columns       = $zen-columns - The number of columns in the grid. See the docs for [`$zen-columns`](section-grids.html#kssref-grids-variables-zen-columns).\n// $gutters       = $zen-gutters - The width of the gutters. See the docs for [`$zen-gutters`](section-grids.html#kssref-grids-variables-zen-gutters).\n// $gutter-method = $zen-gutter-method - The gutter method to use. See the docs for [`$zen-gutter-method`](section-grids.html#kssref-grids-variables-zen-gutter-method).\n// $grid-width    = $zen-grid-width - The width of the entire grid. See the docs for [`$zen-gutter-method`](section-grids.html#kssref-grids-variables-fixed-zen-grid-width).\n//\n// weight: -1\n//\n// Style guide: functions.zen-unit-width\n@function zen-unit-width(\n  $columns        : $zen-columns,\n  $gutters        : $zen-gutters,\n  $gutter-method  : $zen-gutter-method,\n  $grid-width     : $zen-grid-width\n) {\n  $unit-width: 0;\n  @if $gutter-method == margin {\n    $test: zen-compare-units('gutter-method: margin', $gutters, $grid-width);\n    $unit-width: ($grid-width - ($columns - 1) * $gutters) / $columns;\n  }\n  @else {\n    $unit-width: $grid-width / $columns;\n  }\n  @if unit($unit-width) == \"px\" and floor($unit-width) != ceil($unit-width) {\n    @if $gutter-method == margin {\n      $num_gutters: $columns - 1;\n      @warn \"You may experience rounding errors as the grid width, #{$grid-width}, does not divide evenly into #{$columns} columns with #{$num_gutters} of #{$gutters} gutters.\";\n    }\n    @else {\n      @warn \"You may experience rounding errors as the grid width, #{$grid-width}, does not divide evenly into #{$columns} columns.\";\n    }\n  }\n  @return $unit-width;\n}\n\n// zen-grid-item-width()\n//\n// Calculates the width of a grid item that spans the specified number of columns.\n//\n// Common usage:\n// ```\n// .ex {\n//   property: zen-grid-item-width([number]);\n// }\n// ```\n//\n// $column-span   - Required. The number of columns to calculate the width of.\n// $columns       = $zen-columns - The number of columns in the grid. See the docs for [`$zen-columns`](section-grids.html#kssref-grids-variables-zen-columns).\n// $gutters       = $zen-gutters - The width of the gutters. See the docs for [`$zen-gutters`](section-grids.html#kssref-grids-variables-zen-gutters).\n// $gutter-method = $zen-gutter-method - The gutter method to use. See the docs for [`$zen-gutter-method`](section-grids.html#kssref-grids-variables-zen-gutter-method).\n// $grid-width    = $zen-grid-width - The width of the entire grid. See the docs for [`$zen-gutter-method`](section-grids.html#kssref-grids-variables-fixed-zen-grid-width).\n// $box-sizing    = $zen-box-sizing - The box sizing to use. See the docs for [`$zen-box-sizing`](section-grids.html#kssref-grids-variables-zen-box-sizing).\n//\n// Style guide: functions.zen-grid-item-width\n@function zen-grid-item-width(\n  $column-span,\n  $columns        : $zen-columns,\n  $gutters        : $zen-gutters,\n  $gutter-method  : $zen-gutter-method,\n  $grid-width     : $zen-grid-width,\n  $box-sizing     : $zen-box-sizing\n) {\n  $width: $column-span * zen-unit-width($columns, $gutters, $gutter-method, $grid-width);\n\n  // Add the margin gutters internal to the spanning grid item.\n  @if $gutter-method == margin {\n    $width: $width + (floor($column-span) - 1) * $gutters;\n  }\n  // For the original box model, remove the padding from the width.\n  @else if $box-sizing == content-box {\n    $test: zen-compare-units('box-sizing: content-box', $gutters, $grid-width);\n    $width: $width - $gutters;\n  }\n  @return $width;\n}\n\n// zen-direction-switch()\n//\n// Returns the opposite direction, given \"left\" or \"right\".\n//\n// Common usage:\n// ```\n// .ex {\n//   property: zen-direction-switch([left or right]);\n// }\n// ```\n//\n// $direction - Required. The direction you want to switch.\n//\n// weight: 1\n//\n// Style guide: functions.zen-direction-switch\n@function zen-direction-switch(\n  $direction\n) {\n  @if $direction == left {\n    @return right;\n  }\n  @else if $direction == right {\n    @return left;\n  }\n  @else if $direction != none and $direction != both {\n    @warn \"Invalid direction passed to zen-direction-switch().\";\n  }\n  @return $direction;\n}\n\n// zen-support-for-ie()\n//\n// Internal function. If you've installed support-for, this function will tell you if IE 6 or IE 7 should be supported. If support-for is not installed, this function always returns false.\n//\n// No style guide\n@function zen-support-for-ie($min-version) {\n  @if function-exists('support-for') {\n    @return support-for(ie, $min-version);\n  }\n  @else {\n    @return false;\n  }\n}\n","// Flow module\n//\n// The \"Flow\" module for the Zen Grids system allows an item in the normal flow of a document to be aligned to the grid, e.g. an image can be aligned to the grid.\n//\n// To understand this module, it is important to understand the CSS definition of “normal flow”. According to CSS, all content is part of the [normal <em>flow</em>](http://www.w3.org/TR/CSS2/visuren.html#positioning-scheme) by default. For example, paragraph text and images are part of the normal flow.\n//\n// Positioned elements (floats, absolute positioning, etc.) are not part of the normal flow.\n//\n// Zen Grid’s grid items are also positioned elements and, therefore, are no longer part of the normal flow.\n//\n// For example, a layout designer will often make one of Zen Grid’s grid items span multiple columns. The elements within that grid item are part of the normal flow and span the same number of columns as their containing grid item. The layout designer may wish to have an element in the normal flow align to one or more of the columns within the grid item. For example, if a grid item spans 3 columns, the layout designer may want to have all of the images within it to align to the first column inside that grid item and have other flow items wrap around those images.\n//\n// Weight: -8\n//\n// Style guide: flow\n\n@import \"./grids\";\n\n\n// zen-flow-item-width()\n//\n// Apply this to an HTML item that is in the normal flow of a document to help align it to the grid. Set the `$column-span` to the number of columns that the HTML element should span. For responsive layouts with a percentage-based grid width, set the `$parent-column-span` to the number of columns that the parent element spans; fixed-unit layouts using px, em, etc. do not need to specify this.\n//\n// Unlike the `zen-grid-item()` mixin, this mixin does not float the HTML item; see the related `zen-float()` mixin. This mixin also does not have a half-gutter on each side. By default, it has no gutter in the \"alpha position\" (the left side) and a full gutter in the \"omega position\" (the right side.) You can turn on or off the alpha and omega gutters by setting the `$alpha-gutter` and `$omega-gutter` parameters to `true` or `false`.\n//\n// Note: when the `$direction` is set to `right` (for RTL languages), the alpha position is on the right and the omega position is on the left.\n//\n// Common usage:\n// ```\n// @include zen-flow-item-width(\n//   [column-span],\n//   $parent-column-span: [integer]\n// );\n// ```\n// or:\n// ```\n// @include zen-flow-item-width(\n//   [column-span],\n//   $parent-column-span: [integer],\n//   $alpha-gutter: [boolean],\n//   $omega-gutter: [boolean]\n// );\n// ```\n// or for fixed length (em, px, etc.) layouts:\n// ```\n// @include zen-flow-item-width(\n//   [column-span]\n// );\n// ```\n// or:\n// ```\n// @include zen-flow-item-width(\n//   [column-span],\n//   $alpha-gutter: [boolean],\n//   $omega-gutter: [boolean]\n// );\n// ```\n//\n// $column-span         - Required. The number of columns the flow item will span.\n// $parent-column-span  = false - Required for %-based layouts, but not for fixed-width layouts. The number of columns the parent grid item spans.\n// $alpha-gutter        = false - Whether the flow item should have a gutter on its left (or, for RTL layouts, on its right.)\n// $omega-gutter        = true - Whether the flow item should have a gutter on its right (or, for RTL layouts, on its left.)\n// $direction           = $zen-direction - The direction to use. See the docs for [`$zen-direction`](section-grids.html#kssref-grids-variables-rtl-zen-direction).\n// $columns             = $zen-columns - The number of columns in the grid. See the docs for [`$zen-columns`](section-grids.html#kssref-grids-variables-zen-columns).\n// $gutters             = $zen-gutters - The width of the gutters. See the docs for [`$zen-gutters`](section-grids.html#kssref-grids-variables-zen-gutters).\n// $gutter-method       = $zen-gutter-method - The gutter method to use. See the docs for [`$zen-gutter-method`](section-grids.html#kssref-grids-variables-zen-gutter-method).\n// $grid-width          = $zen-grid-width - The width of the entire grid. See the docs for [`$zen-gutter-method`](section-grids.html#kssref-grids-variables-fixed-zen-grid-width).\n// $box-sizing          = $zen-box-sizing - The box sizing to use. See the docs for [`$zen-box-sizing`](section-grids.html#kssref-grids-variables-zen-box-sizing).\n// $switch-direction    = $zen-switch-direction - Whether to switch the default direction. See the docs for [`$zen-switch-direction`](section-grids.html#kssref-grids-variables-rtl-zen-switch-direction).\n// $rtl-selector        = $zen-rtl-selector - The RTL selector for this background. See the docs for [`$zen-rtl-selector`](section-grids.html#kssref-grids-variables-rtl-zen-rtl-selector).\n// $include-base        = $zen-auto-include-flow-item-base - Whether to auto-include the zen-flow-item-base() mixin. See the docs for [`$zen-auto-include-flow-item-base`](section-flow.html#kssref-grids-variables-zen-auto-include-flow-item-base).\n//\n// Style guide: flow.zen-flow-item-width\n@mixin zen-flow-item-width(\n  $column-span,\n  $parent-column-span   : false,\n  $alpha-gutter         : false,\n  $omega-gutter         : true,\n  $direction            : $zen-direction,\n  $columns              : $zen-columns,\n  $gutters              : $zen-gutters,\n  $gutter-method        : $zen-gutter-method,\n  $grid-width           : $zen-grid-width,\n  $box-sizing           : $zen-box-sizing,\n  $switch-direction     : $zen-switch-direction,\n  $rtl-selector         : $zen-rtl-selector,\n  $include-base         : $zen-auto-include-flow-item-base\n) {\n\n  // Save the columns and gutters from the parent context.\n  $main-columns: $columns;\n  $main-gutters: $gutters;\n  $main-grid-width: $grid-width;\n\n  // Find the parent context for fluid layouts.\n  @if unit($grid-width) == \"%\" {\n    // The number of columns the parent element spans is our new column count.\n    @if $parent-column-span != false {\n      $columns: $parent-column-span;\n    }\n    @else {\n      // If we don't know the number of columns the parent element spans, then\n      // warn the user and force the flow item to span 100% of the parent.\n      @error \"For responsive layouts with a percentage-based grid width, you must set the $parent-column-span to the number of columns that the parent element spans.\";\n    }\n    // We want our inner grid to span the entire width of the parent.\n    $grid-width: 100%;\n  }\n\n  // Determine the flow direction and its reverse.\n  $dir: $direction;\n  @if $switch-direction {\n    $dir: zen-direction-switch($dir);\n  }\n  $rev: zen-direction-switch($dir);\n\n  // Calculate the new gutters when the layout and gutters are both fluid.\n  @if unit($grid-width) == \"%\" and unit($gutters) == \"%\" {\n    // Calculate the parent's width.\n    $parent-width: zen-grid-item-width($parent-column-span, $main-columns, $main-gutters, $gutter-method, $main-grid-width, $box-sizing);\n    // Calculate the new gutters.\n    $gutters: $main-gutters * ($grid-width / $parent-width);\n  }\n\n  // Include the flow item base mixin.\n  @if $include-base {\n    @include zen-flow-item-base($gutters, $gutter-method, $box-sizing, $direction, $switch-direction, $rtl-selector);\n  }\n\n  // Calculate the item's width.\n  $width: zen-grid-item-width($column-span, $columns, $gutters, $gutter-method, $grid-width, $box-sizing);\n  @if $gutter-method == padding and unit($grid-width) != \"%\" and not $alpha-gutter and not $omega-gutter and ($box-sizing == border-box or $box-sizing == universal-border-box) {\n    $width: $width - $gutters;\n  }\n  width: $width;\n\n  @if $gutter-method == margin {\n    @if $alpha-gutter {\n      margin-#{$dir}: $gutters;\n    }\n    @if $omega-gutter {\n      margin-#{$rev}: $gutters;\n    }\n    @if not ($omega-gutter and $omega-gutter) {\n      @include zen-rtl($rtl-selector) {\n        @if $alpha-gutter {\n          margin-#{$dir}: 0;\n          margin-#{$rev}: $gutters;\n        }\n        @else if $omega-gutter {\n          margin-#{$rev}: 0;\n          margin-#{$dir}: $gutters;\n        }\n      }\n    }\n  }\n  @else if unit($grid-width) == \"%\" {\n    // Our percentage $width is off since the parent has $main-gutters padding.\n    // Calculate an adjusted gutter to fix the width.\n    $adjusted-gutter: ($columns - $column-span) * $gutters / $columns;\n\n    // Ensure the HTML item either has a full gutter or no gutter on each side.\n    padding-#{$dir}: 0;\n    @if $alpha-gutter {\n      margin-#{$dir}: $gutters;\n    }\n    padding-#{$rev}: $adjusted-gutter;\n    @if $omega-gutter {\n      margin-#{$rev}: $gutters - $adjusted-gutter;\n    }\n    @else {\n      margin-#{$rev}: -($adjusted-gutter);\n    }\n    @include zen-rtl($rtl-selector) {\n      padding-#{$rev}: 0;\n      @if $alpha-gutter {\n        margin-#{$rev}: $gutters;\n      }\n      padding-#{$dir}: $adjusted-gutter;\n      @if $omega-gutter {\n        margin-#{$dir}: $gutters - $adjusted-gutter;\n      }\n      @else {\n        margin-#{$dir}: -($adjusted-gutter);\n      }\n    }\n  }\n  @else {\n    @if $alpha-gutter and $omega-gutter {\n      @if $gutters != 0 {\n        margin: {\n          #{$dir}: zen-half-gutter($gutters, left, $dir);\n          #{$rev}: zen-half-gutter($gutters, right, $dir);\n        }\n        // If $gutters is an odd number of pixels, we need special RTL handling.\n        @if zen-half-gutter($gutters, left, $dir) != zen-half-gutter($gutters, right, $dir) {\n          @include zen-rtl($rtl-selector) {\n            margin: {\n              left: zen-half-gutter($gutters, right, $dir);\n              right: zen-half-gutter($gutters, left, $dir);\n            }\n          }\n        }\n      }\n    }\n    @else if not $alpha-gutter and not $omega-gutter {\n      @if $gutters != 0 {\n        padding: {\n          left: 0;\n          right: 0;\n        }\n      }\n    }\n    @else if $omega-gutter {\n      padding-#{$dir}: 0;\n      padding-#{$rev}: $gutters;\n      @include zen-rtl($rtl-selector) {\n        padding-#{$rev}: 0;\n        padding-#{$dir}: $gutters;\n      }\n    }\n    @else {\n      padding-#{$dir}: $gutters;\n      padding-#{$rev}: 0;\n      @include zen-rtl($rtl-selector) {\n        padding-#{$rev}: $gutters;\n        padding-#{$dir}: 0;\n      }\n    }\n  }\n}\n\n// zen-flow-item-base()\n//\n// Applies a standard set of properties to flow items that are aligned to the grid.\n//\n// Common usage:\n// ```\n// @include zen-flow-item-base();\n// ```\n//\n// $gutters             = $zen-gutters - The width of the gutters. See the docs for [`$zen-gutters`](section-grids.html#kssref-grids-variables-zen-gutters).\n// $gutter-method       = $zen-gutter-method - The gutter method to use. See the docs for [`$zen-gutter-method`](section-grids.html#kssref-grids-variables-zen-gutter-method).\n// $box-sizing          = $zen-box-sizing - The box sizing to use. See the docs for [`$zen-box-sizing`](section-grids.html#kssref-grids-variables-zen-box-sizing).\n// $direction           = $zen-direction - The direction to use. See the docs for [`$zen-direction`](section-grids.html#kssref-grids-variables-rtl-zen-direction).\n// $switch-direction    = $zen-switch-direction - Whether to switch the default direction. See the docs for [`$zen-switch-direction`](section-grids.html#kssref-grids-variables-rtl-zen-switch-direction).\n// $rtl-selector        = $zen-rtl-selector - The RTL selector for this background. See the docs for [`$zen-rtl-selector`](section-grids.html#kssref-grids-variables-rtl-zen-rtl-selector).\n//\n// Style guide: flow.zen-flow-item-base\n@mixin zen-flow-item-base(\n  $gutters                  : $zen-gutters,\n  $gutter-method            : $zen-gutter-method,\n  $box-sizing               : $zen-box-sizing,\n  $direction                : $zen-direction,\n  $switch-direction         : $zen-switch-direction,\n  $rtl-selector             : $zen-rtl-selector\n) {\n\n  // Since we have to set padding in zen-flow-item-width(), suppress extraneous\n  // padding declarations in the base by setting $gutter-method to none.\n  @if $gutter-method == padding {\n    $gutter-method: none;\n  }\n  @include zen-grid-item-base($gutters, $gutter-method, $box-sizing, $direction, $switch-direction, $rtl-selector);\n}\n\n// zen-float()\n//\n// Apply this to flow items that need to be floated.\n//\n// Using this mixin is longer than just typing `float: left;`. However, this mixin integrates with the RTL variables and mixins so that the direction of floating can be changed automatically.\n//\n// Common usage:\n// ```\n// @include zen-float();\n// ```\n// or:\n// ```\n// @include zen-float(right);\n// ```\n//\n// $direction           = $zen-direction - The direction to use. See the docs for [`$zen-direction`](section-grids.html#kssref-grids-variables-rtl-zen-direction).\n// $switch-direction    = $zen-switch-direction - Whether to switch the default direction. See the docs for [`$zen-switch-direction`](section-grids.html#kssref-grids-variables-rtl-zen-switch-direction).\n// $rtl-selector        = $zen-rtl-selector - The RTL selector for this background. See the docs for [`$zen-rtl-selector`](section-grids.html#kssref-grids-variables-rtl-zen-rtl-selector).\n//\n// Style guide: flow.zen-float\n@mixin zen-float(\n  $direction          : $zen-direction,\n  $switch-direction   : $zen-switch-direction,\n  $rtl-selector       : $zen-rtl-selector\n) {\n  // Determine the float direction.\n  $dir: $direction;\n  @if $switch-direction {\n    $dir: zen-direction-switch($dir);\n  }\n  float: $dir;\n\n  @include zen-rtl($rtl-selector) {\n    float: zen-direction-switch($dir);\n  }\n}\n","// Layout module\n//\n// The \"Layout\" module for the Zen Grids system.\n//\n// When building a grid system for your site, properties (like number of columns or gutter size) will need different values at different viewport widths. In previous versions of Zen Grids, this meant changing the Zen Grids' global variables each time you wanted to build a layout at a different viewport size. With the layout module, you can instead set grid system properties that override your default global variables within the scope of the layout mixin.\n//\n// For example:\n// ```\n// $zen-columns: 1; // Default to one column for mobile layout.\n// @include zen-layout($columns: 3) {\n//   // $zen-columns is set to 3 inside this block and can be used to build a\n//   // layout for the following breakpoint.\n//   @media screen and (min-width: 777px) {\n//     .sidebar {\n//       // The sidebar will span the first column of the 3 columns defined.\n//       @include zen-grid-item(1, 1);\n//     }\n//   }\n// }\n// // $zen-columns is back to 1 after the zen-layout() block.\n// ```\n//\n// Weight: -6\n//\n// Style guide: layout\n\n@import \"./grids\";\n\n// zen-layout(...)\n//\n// Should be used to add a wrapping block where its parameters will override the\n// corresponding global `$zen-*` variables within it.\n//\n// Common usage:\n// ```\n// @include zen-layout(m) {\n//   // Use other Zen Grids mixins and layouts without changing global vars.\n// }\n// ```\n// or:\n// ```\n// @include zen-layout($gutters: 0) {\n//   // The code in this block will see `$zen-gutters: 0`, but code after this\n//   // block will see the usual value of that global variable.\n// }\n// ```\n//\n// $layout                      = null - Optionally specify the name of the layout from `$zen-layouts` to use. See the docs for [`$zen-layouts`](section-grids.html#kssref-layout-variables-zen-layouts).\n// $columns                     = $zen-columns - The number of columns. See the docs for [`$zen-columns`](section-grids.html#kssref-grids-variables-zen-columns).\n// $gutters                     = $zen-gutters - The width of the gutters. See the docs for [`$zen-gutters`](section-grids.html#kssref-grids-variables-zen-gutters).\n// $gutter-method               = $zen-gutter-method - The gutter method to use. See the docs for [`$zen-gutter-method`](section-grids.html#kssref-grids-variables-zen-gutter-method).\n// $grid-width                  = $zen-grid-width - The width of the entire grid. See the docs for [`$zen-gutter-method`](section-grids.html#kssref-grids-variables-fixed-zen-grid-width).\n// $box-sizing                  = $zen-box-sizing - The box sizing to use. See the docs for [`$zen-box-sizing`](section-grids.html#kssref-grids-variables-zen-box-sizing).\n// $direction                   = $zen-direction - The direction to use. See the docs for [`$zen-direction`](section-grids.html#kssref-grids-variables-rtl-zen-direction).\n// $switch-direction            = $zen-switch-direction - Whether to switch the default direction. See the docs for [`$zen-switch-direction`](section-grids.html#kssref-grids-variables-rtl-zen-switch-direction).\n// $rtl-selector                = $zen-rtl-selector - The RTL selector for this background. See the docs for [`$zen-rtl-selector`](section-grids.html#kssref-grids-variables-rtl-zen-rtl-selector).\n// $auto-include-grid-item-base = $zen-auto-include-grid-item-base - Whether to auto-include the zen-grid-item-base() mixin. See the docs for [`$zen-auto-include-grid-item-base`](section-grids.html#kssref-grids-variables-zen-auto-include-grid-item-base).\n// $auto-include-flow-item-base = $zen-auto-include-flow-item-base - Whether to auto-include the zen-flow-item-base() mixin. See the docs for [`$zen-auto-include-flow-item-base`](section-flow.html#kssref-flow-variables-zen-auto-include-flow-item-base).\n// $grid-color                  = $zen-grid-color - The column color to use for the background grid image. See the docs for [`$zen-grid-color`](section-background.html#kssref-background-variables-zen-grid-color).\n// $grid-numbers                = $zen-grid-numbers - Specify the set of images used for the numbering of the columns in the background grid image. See the docs for [`$zen-grid-numbers`](section-background.html#kssref-background-variables-zen-grid-numbers).\n//\n// weight: -10\n//\n// Style guide: layout.zen-layout\n@mixin zen-layout(\n  $layout                       : null,\n  $columns                      : null,\n  $gutters                      : null,\n  $gutter-method                : null,\n  $grid-width                   : null,\n  $box-sizing                   : null,\n  $direction                    : null,\n  $switch-direction             : null,\n  $rtl-selector                 : null,\n  $auto-include-grid-item-base  : null,\n  $auto-include-flow-item-base  : null,\n  $grid-color                   : null,\n  $grid-numbers                 : null\n) {\n\n  // Save the previous versions of Zen's global variables.\n  $global-vars                      : (\n    'columns'                       : $zen-columns,\n    'gutters'                       : $zen-gutters,\n    'gutter-method'                 : $zen-gutter-method,\n    'grid-width'                    : $zen-grid-width,\n    'box-sizing'                    : $zen-box-sizing,\n    'direction'                     : $zen-direction,\n    'switch-direction'              : $zen-switch-direction,\n    'rtl-selector'                  : $zen-rtl-selector,\n    'auto-include-grid-item-base'   : $zen-auto-include-grid-item-base,\n    'auto-include-flow-item-base'   : $zen-auto-include-flow-item-base,\n    'grid-color'                    : $zen-grid-color,\n    'grid-numbers'                  : $zen-grid-numbers\n  );\n\n  // Grab a layout from $zen-layouts while defaulting to the global values.\n  $local-defaults: $global-vars;\n  @if type-of($layout) != 'null' and map-has-key($zen-layouts, $layout) {\n    $local-defaults: map-merge($local-defaults, map-get($zen-layouts, $layout));\n  }\n\n  // Ensure our local parameters all have a value.\n  @if type-of($columns) == 'null' {\n    $columns: map-get($local-defaults, 'columns');\n  }\n  @if type-of($gutters) == 'null' {\n    $gutters: map-get($local-defaults, 'gutters');\n  }\n  @if type-of($gutter-method) == 'null' {\n    $gutter-method: map-get($local-defaults, 'gutter-method');\n  }\n  @if type-of($grid-width) == 'null' {\n    $grid-width: map-get($local-defaults, 'grid-width');\n  }\n  @if type-of($box-sizing) == 'null' {\n    $box-sizing: map-get($local-defaults, 'box-sizing');\n  }\n  @if type-of($direction) == 'null' {\n    $direction: map-get($local-defaults, 'direction');\n  }\n  @if type-of($switch-direction) == 'null' {\n    $switch-direction: map-get($local-defaults, 'switch-direction');\n  }\n  @if type-of($rtl-selector) == 'null' {\n    $rtl-selector: map-get($local-defaults, 'rtl-selector');\n  }\n  @if type-of($auto-include-grid-item-base) == 'null' {\n    $auto-include-grid-item-base: map-get($local-defaults, 'auto-include-grid-item-base');\n  }\n  @if type-of($auto-include-flow-item-base) == 'null' {\n    $auto-include-flow-item-base: map-get($local-defaults, 'auto-include-flow-item-base');\n  }\n  @if type-of($grid-color) == 'null' {\n    $grid-color: map-get($local-defaults, 'grid-color');\n  }\n  @if type-of($grid-numbers) == 'null' {\n    $grid-numbers: map-get($local-defaults, 'grid-numbers');\n  }\n\n  // Temporarily override Zen's global variables.\n  $zen-columns                      : $columns !global;\n  $zen-gutters                      : $gutters !global;\n  $zen-gutter-method                : $gutter-method !global;\n  $zen-grid-width                   : $grid-width !global;\n  $zen-box-sizing                   : $box-sizing !global;\n  $zen-direction                    : $direction !global;\n  $zen-switch-direction             : $switch-direction !global;\n  $zen-rtl-selector                 : $rtl-selector !global;\n  $zen-auto-include-grid-item-base  : $auto-include-grid-item-base !global;\n  $zen-auto-include-flow-item-base  : $auto-include-flow-item-base !global;\n  $zen-grid-color                   : $grid-color !global;\n  $zen-grid-numbers                 : $grid-numbers !global;\n\n  // Generate the content in the new global context.\n  @content;\n\n  // Restore Zen's global variables.\n  $zen-columns                      : map-get($global-vars, 'columns') !global;\n  $zen-gutters                      : map-get($global-vars, 'gutters') !global;\n  $zen-gutter-method                : map-get($global-vars, 'gutter-method') !global;\n  $zen-grid-width                   : map-get($global-vars, 'grid-width') !global;\n  $zen-box-sizing                   : map-get($global-vars, 'box-sizing') !global;\n  $zen-direction                    : map-get($global-vars, 'direction') !global;\n  $zen-switch-direction             : map-get($global-vars, 'switch-direction') !global;\n  $zen-rtl-selector                 : map-get($global-vars, 'rtl-selector') !global;\n  $zen-auto-include-grid-item-base  : map-get($global-vars, 'auto-include-grid-item-base') !global;\n  $zen-auto-include-flow-item-base  : map-get($global-vars, 'auto-include-flow-item-base') !global;\n  $zen-grid-color                   : map-get($global-vars, 'grid-color') !global;\n  $zen-grid-numbers                 : map-get($global-vars, 'grid-numbers') !global;\n}\n\n// zen-breakpoint(...)\n//\n// Combines zen-layout() with the Breakpoint module's breakpoint() mixin.\n//\n// Instead of nesting zen-layout() with breakpoint() like this:\n// ```\n// @include zen-layout($layout: 'm') {\n//   @include breakpoint($medium) {\n//     // Do something.\n//   }\n// }\n// ```\n//\n// You can use the zen-breakpoint() mixin like this:\n// ```\n// @include zen-breakpoint($medium, $layout: 'm') {\n//   // Do something.\n// }\n// ```\n//\n// $query                       - Required. This parameter is passed on to the `breakpoint()` mixin.\n// $no-query                    = false - This parameter is passed on to the `breakpoint()` mixin.\n// $layout                      = null - Optionally specify the name of the layout from `$zen-layouts` to use. See the docs for [`$zen-layouts`](section-grids.html#kssref-layout-variables-zen-layouts).\n// $columns                     = $zen-columns - The number of columns. See the docs for [`$zen-columns`](section-grids.html#kssref-grids-variables-zen-columns).\n// $gutters                     = $zen-gutters - The width of the gutters. See the docs for [`$zen-gutters`](section-grids.html#kssref-grids-variables-zen-gutters).\n// $gutter-method               = $zen-gutter-method - The gutter method to use. See the docs for [`$zen-gutter-method`](section-grids.html#kssref-grids-variables-zen-gutter-method).\n// $grid-width                  = $zen-grid-width - The width of the entire grid. See the docs for [`$zen-gutter-method`](section-grids.html#kssref-grids-variables-fixed-zen-grid-width).\n// $box-sizing                  = $zen-box-sizing - The box sizing to use. See the docs for [`$zen-box-sizing`](section-grids.html#kssref-grids-variables-zen-box-sizing).\n// $direction                   = $zen-direction - The direction to use. See the docs for [`$zen-direction`](section-grids.html#kssref-grids-variables-rtl-zen-direction).\n// $switch-direction            = $zen-switch-direction - Whether to switch the default direction. See the docs for [`$zen-switch-direction`](section-grids.html#kssref-grids-variables-rtl-zen-switch-direction).\n// $rtl-selector                = $zen-rtl-selector - The RTL selector for this background. See the docs for [`$zen-rtl-selector`](section-grids.html#kssref-grids-variables-rtl-zen-rtl-selector).\n// $auto-include-grid-item-base = $zen-auto-include-grid-item-base - Whether to auto-include the zen-grid-item-base() mixin. See the docs for [`$zen-auto-include-grid-item-base`](section-grids.html#kssref-grids-variables-zen-auto-include-grid-item-base).\n// $auto-include-flow-item-base = $zen-auto-include-flow-item-base - Whether to auto-include the zen-flow-item-base() mixin. See the docs for [`$zen-auto-include-flow-item-base`](section-flow.html#kssref-flow-variables-zen-auto-include-flow-item-base).\n// $grid-color                  = $zen-grid-color - The column color to use for the background grid image. See the docs for [`$zen-grid-color`](section-background.html#kssref-background-variables-zen-grid-color).\n// $grid-numbers                = $zen-grid-numbers - Specify the set of images used for the numbering of the columns in the background grid image. See the docs for [`$zen-grid-numbers`](section-background.html#kssref-background-variables-zen-grid-numbers).\n//\n// Style guide: layout.zen-breakpoint\n@mixin zen-breakpoint(\n  $query,\n  $no-query: false,\n  $layout                       : null,\n  $columns                      : null,\n  $gutters                      : null,\n  $gutter-method                : null,\n  $grid-width                   : null,\n  $box-sizing                   : null,\n  $direction                    : null,\n  $switch-direction             : null,\n  $rtl-selector                 : null,\n  $auto-include-grid-item-base  : null,\n  $auto-include-flow-item-base  : null,\n  $grid-color                   : null,\n  $grid-numbers                 : null\n) {\n\n  @if not mixin-exists('breakpoint') {\n    @error 'You need to @import the breakpoint mixin before using zen-breakpoint().';\n  }\n\n  @include zen-layout(\n    $layout,\n    $columns,\n    $gutters,\n    $gutter-method,\n    $grid-width,\n    $box-sizing,\n    $direction,\n    $switch-direction,\n    $rtl-selector,\n    $auto-include-grid-item-base,\n    $auto-include-flow-item-base,\n    $grid-color,\n    $grid-numbers\n  ) {\n    @include breakpoint($query, $no-query) {\n      @content;\n    }\n  }\n}\n\n// zen-mq(...)\n//\n// An alias for the [`zen-breakpoint()`](#kssref-layout-zen-breakpoint) mixin.\n//\n// Style guide: layout.zen-mq\n@mixin zen-mq(\n  $query,\n  $no-query: false,\n  $layout                       : null,\n  $columns                      : null,\n  $gutters                      : null,\n  $gutter-method                : null,\n  $grid-width                   : null,\n  $box-sizing                   : null,\n  $direction                    : null,\n  $switch-direction             : null,\n  $rtl-selector                 : null,\n  $auto-include-grid-item-base  : null,\n  $auto-include-flow-item-base  : null,\n  $grid-color                   : null,\n  $grid-numbers                 : null\n) {\n\n  @if not mixin-exists('mq') {\n    @error 'You need to @import the mq mixin before using zen-mq().';\n  }\n\n  @include zen-layout(\n    $layout,\n    $columns,\n    $gutters,\n    $gutter-method,\n    $grid-width,\n    $box-sizing,\n    $direction,\n    $switch-direction,\n    $rtl-selector,\n    $auto-include-grid-item-base,\n    $auto-include-flow-item-base,\n    $grid-color,\n    $grid-numbers\n  ) {\n    @include mq($query, $no-query) {\n      @content;\n    }\n  }\n}\n\n// zen-respond-to(...)\n//\n// Combines zen-layout() with the Breakpoint module's respond-to() mixin.\n//\n// Instead of nesting zen-layout() with respond-to() like this:\n// ```\n// @include zen-layout($layout: 'm') {\n//   @include respond-to('m') {\n//     // Do something.\n//   }\n// }\n// ```\n//\n// You can use the zen-respond-to() mixin like this:\n// ```\n// @include zen-respond-to('m') {\n//   // Do something.\n// }\n// ```\n//\n// Note that the 'm' in the above example uses the same name in the\n// $breakpoints map as is used in the $zen-layouts map.\n//\n// You can use a differently-named layout by explicitly specifying the $layout\n// parameter like this:\n// ```\n// @include zen-respond-to('m', $layout: 'medium') {\n//   // Do something.\n// }\n// ```\n//\n// $context                     - Required. This parameter is passed on to the respond-to() mixin.\n// $no-query                    = false - This parameter is passed on to the respond-to() mixin.\n// $layout                      = null - Optionally specify the name of the layout from `$zen-layouts` to use. See the docs for [`$zen-layouts`](section-grids.html#kssref-layout-variables-zen-layouts).\n// $columns                     = $zen-columns - The number of columns. See the docs for [`$zen-columns`](section-grids.html#kssref-grids-variables-zen-columns).\n// $gutters                     = $zen-gutters - The width of the gutters. See the docs for [`$zen-gutters`](section-grids.html#kssref-grids-variables-zen-gutters).\n// $gutter-method               = $zen-gutter-method - The gutter method to use. See the docs for [`$zen-gutter-method`](section-grids.html#kssref-grids-variables-zen-gutter-method).\n// $grid-width                  = $zen-grid-width - The width of the entire grid. See the docs for [`$zen-gutter-method`](section-grids.html#kssref-grids-variables-fixed-zen-grid-width).\n// $box-sizing                  = $zen-box-sizing - The box sizing to use. See the docs for [`$zen-box-sizing`](section-grids.html#kssref-grids-variables-zen-box-sizing).\n// $direction                   = $zen-direction - The direction to use. See the docs for [`$zen-direction`](section-grids.html#kssref-grids-variables-rtl-zen-direction).\n// $switch-direction            = $zen-switch-direction - Whether to switch the default direction. See the docs for [`$zen-switch-direction`](section-grids.html#kssref-grids-variables-rtl-zen-switch-direction).\n// $rtl-selector                = $zen-rtl-selector - The RTL selector for this background. See the docs for [`$zen-rtl-selector`](section-grids.html#kssref-grids-variables-rtl-zen-rtl-selector).\n// $auto-include-grid-item-base = $zen-auto-include-grid-item-base - Whether to auto-include the zen-grid-item-base() mixin. See the docs for [`$zen-auto-include-grid-item-base`](section-grids.html#kssref-grids-variables-zen-auto-include-grid-item-base).\n// $auto-include-flow-item-base = $zen-auto-include-flow-item-base - Whether to auto-include the zen-flow-item-base() mixin. See the docs for [`$zen-auto-include-flow-item-base`](section-flow.html#kssref-flow-variables-zen-auto-include-flow-item-base).\n// $grid-color                  = $zen-grid-color - The column color to use for the background grid image. See the docs for [`$zen-grid-color`](section-background.html#kssref-background-variables-zen-grid-color).\n// $grid-numbers                = $zen-grid-numbers - Specify the set of images used for the numbering of the columns in the background grid image. See the docs for [`$zen-grid-numbers`](section-background.html#kssref-background-variables-zen-grid-numbers).\n//\n// Style guide: layout.zen-respond-to\n@mixin zen-respond-to(\n  $context,\n  $no-query: false,\n  $layout                       : null,\n  $columns                      : null,\n  $gutters                      : null,\n  $gutter-method                : null,\n  $grid-width                   : null,\n  $box-sizing                   : null,\n  $direction                    : null,\n  $switch-direction             : null,\n  $rtl-selector                 : null,\n  $auto-include-grid-item-base  : null,\n  $auto-include-flow-item-base  : null,\n  $grid-color                   : null,\n  $grid-numbers                 : null\n) {\n\n  @if not mixin-exists('respond-to') {\n    @error 'You need to @import the respond-to mixin before using zen-respond-to().';\n  }\n\n  // Allow the first parameter to control both $context and $layout.\n  @if type-of($layout) == 'null' and map-has-key($zen-layouts, $context) {\n    $layout: $context;\n  }\n\n  @include zen-layout(\n    $layout,\n    $columns,\n    $gutters,\n    $gutter-method,\n    $grid-width,\n    $box-sizing,\n    $direction,\n    $switch-direction,\n    $rtl-selector,\n    $auto-include-grid-item-base,\n    $auto-include-flow-item-base,\n    $grid-color,\n    $grid-numbers\n  ) {\n    @include respond-to($context, $no-query) {\n      @content;\n    }\n  }\n}\n","// Undo module\n//\n// The undo module for the Zen Grids system.\n//\n// With responsive design, it is not uncommon to have wrapping elements that are have grid styling at some breakpoints, but not at other breakpoints. The undo module provides a set of mixins that allow you to undo the CSS of other Zen Grids mixins.\n//\n// Style guide: undo\n\n@import \"./grids\";\n\n\n// undo-zen-grid-container()\n//\n// Apply this to undo the grid container styling applied with [`zen-grid-container()`](section-grids.html#kssref-grids-zen-grid-container).\n//\n// NOTE: if `$context` is `flow`, the `zen-grid-container()` set the left and right padding to `0` to prevent it from messing up the alignment of the nested grid. Since Zen Grids doesn't know what you previously used for this element's padding, there is no way to undo that automatically; you will need to manually reset the padding.\n//\n// Common usage:\n// ```\n// @include undo-zen-grid-container();\n// ```\n// or:\n// ```\n// @include undo-zen-grid-container(grid-item);\n// ```\n//\n// $context            = none - If this grid is nested inside another grid, the `$context` parameter can be used to align the nested grid with the parent grid. It can be set to `none`, `grid-item`, or `flow`.\n// $gutters            = $zen-gutters - The width of the gutters for this container. See the docs for [`$zen-gutters`](section-grids.html#kssref-grids-variables-zen-gutters).\n// $gutter-method      = $zen-gutter-method - The gutter method to use for this container. See the docs for [`$zen-gutter-method`](section-grids.html#kssref-grids-variables-zen-gutter-method).\n// $direction          = $zen-direction - The direction to use for this container. See the docs for [`$zen-direction`](section-grids.html#kssref-grids-variables-rtl-zen-direction).\n// $switch-direction   = $zen-switch-direction - Whether to switch the default direction for this container. See the docs for [`$zen-switch-direction`](section-grids.html#kssref-grids-variables-rtl-zen-switch-direction).\n// $rtl-selector       = $zen-rtl-selector - The RTL selector for this container. See the docs for [`$zen-rtl-selector`](section-grids.html#kssref-grids-variables-rtl-zen-rtl-selector).\n//\n// weight: -10\n//\n// Style guide: undo.undo-zen-grid-container\n@mixin undo-zen-grid-container(\n  $context            : none,\n  $gutters            : $zen-gutters,\n  $gutter-method      : $zen-gutter-method,\n  $direction          : $zen-direction,\n  $switch-direction   : $zen-switch-direction,\n  $rtl-selector       : $zen-rtl-selector\n) {\n\n  $dir: $direction;\n  @if $switch-direction {\n    $dir: zen-direction-switch($dir);\n  }\n\n  @if $context == flow-item {\n    @warn \"zen-grid-container()'s $context cannot be set to: flow-item. It has been set to: flow.\";\n    $context: flow;\n  }\n  @else if $context == grid {\n    @warn \"zen-grid-container()'s $context cannot be set to: grid. It has been set to: grid-item.\";\n    $context: grid-item;\n  }\n\n  // @TODO: This is a pre-IE8 line of code; don't remember why its needed.\n  @if zen-support-for-ie(7) {\n    *position: static;\n  }\n\n  // Un-do the \"micro clearfix\".\n  &:before {\n    content: normal;\n    display: inline;\n  }\n  &:after {\n    content: normal;\n    display: inline;\n    clear: none;\n  }\n  @if zen-support-for-ie(7) {\n    *zoom: normal;\n  }\n\n  // Reset the negative margins that un-did the gutter padding of the parent\n  // grid item.\n  @if $context == flow and $gutter-method == padding {\n    margin: {\n      left: 0;\n      right: 0;\n    }\n\n    // If $gutters is an odd number of pixels, we need special RTL handling.\n    @if zen-half-gutter($gutters, left, $dir) != zen-half-gutter($gutters, right, $dir) {\n      @include zen-rtl($rtl-selector) {\n        margin: {\n          left: 0;\n          right: 0;\n        }\n      }\n    }\n  }\n\n  // Re-add the original gutters to the grid item.\n  @if $context == grid-item and $gutter-method == padding {\n    @include zen-apply-gutter-padding($gutters, $direction, $switch-direction, $rtl-selector);\n  }\n}\n\n// undo-zen-grid-item()\n//\n// Apply this to undo the grid item styling applied with [`zen-grid-item()`](section-grids.html#kssref-grids-zen-grid-item).\n//\n// Common usage:\n// ```\n// @include undo-zen-grid-item();\n// ```\n//\n// $direction          = $zen-direction - The floating direction to use for this grid item. See the docs for [`$zen-direction`](section-grids.html#kssref-grids-variables-rtl-zen-direction).\n// $gutters            = $zen-gutters - The width of the gutters for this grid item. See the docs for [`$zen-gutters`](section-grids.html#kssref-grids-variables-zen-gutters).\n// $gutter-method      = $zen-gutter-method - The gutter method to use for this grid item. See the docs for [`$zen-gutter-method`](section-grids.html#kssref-grids-variables-zen-gutter-method).\n// $box-sizing         = $zen-box-sizing - The box sizing to use for this grid item. See the docs for [`$zen-box-sizing`](section-grids.html#kssref-grids-variables-zen-box-sizing).\n// $switch-direction   = $zen-switch-direction - Whether to switch the default direction for this grid item. See the docs for [`$zen-switch-direction`](section-grids.html#kssref-grids-variables-rtl-zen-switch-direction).\n// $rtl-selector       = $zen-rtl-selector - The RTL selector for this grid item. See the docs for [`$zen-rtl-selector`](section-grids.html#kssref-grids-variables-rtl-zen-rtl-selector).\n// $include-base       = $zen-auto-include-grid-item-base - Whether to auto-include the undo-zen-grid-item-base() mixin. See the docs for [`$zen-auto-include-grid-item-base`](section-grids.html#kssref-grids-variables-zen-auto-include-grid-item-base).\n//\n// Style guide: undo.undo-zen-grid-item\n@mixin undo-zen-grid-item(\n  $direction          : $zen-direction,\n  $gutters            : $zen-gutters,\n  $gutter-method      : $zen-gutter-method,\n  $box-sizing         : $zen-box-sizing,\n  $switch-direction   : $zen-switch-direction,\n  $rtl-selector       : $zen-rtl-selector,\n  $include-base       : $zen-auto-include-grid-item-base\n) {\n\n  float: none;\n  width: auto;\n  margin: {\n    left:  0;\n    right: 0;\n  }\n\n  // Include the grid item base mixin.\n  @if $include-base {\n    @include undo-zen-grid-item-base($gutters, $gutter-method, $box-sizing, $direction, $switch-direction, $rtl-selector);\n  }\n  // If the $gutters parameter has been used, undo the gutters even if\n  // $include-base is false.\n  @else if $gutters != $zen-gutters and $gutter-method == padding {\n    @include undo-zen-apply-gutter-padding($gutters, $direction, $switch-direction, $rtl-selector);\n  }\n}\n\n// undo-zen-grid-item-base()\n//\n// Undoes the standard set of properites for grid items in the layout. Apply this to undo the styling applied with [`zen-grid-item-base()`](section-grids.html#kssref-grids-zen-grid-item-base).\n//\n// NOTE: if `$box-sizing` is `content-box`, the `zen-grid-item-base()` will add left and right borders and padding of `0 !important` since non-zero values would break the layout. There is no way to undo that automatically. You'll have to manually set the borders and padding to their original values.\n//\n// Common usage:\n// ```\n// @include undo-zen-grid-item-base();\n// ```\n//\n// $gutters            = $zen-gutters - The width of the gutters for this grid item. See the docs for [`$zen-gutters`](section-grids.html#kssref-grids-variables-zen-gutters).\n// $gutter-method      = $zen-gutter-method - The gutter method to use for this grid item. See the docs for [`$zen-gutter-method`](section-grids.html#kssref-grids-variables-zen-gutter-method).\n// $box-sizing         = $zen-box-sizing - The box sizing to use for this grid item. See the docs for [`$zen-box-sizing`](section-grids.html#kssref-grids-variables-zen-box-sizing).\n// $switch-direction   = $zen-switch-direction - Whether to switch the default direction for this grid item. See the docs for [`$zen-switch-direction`](section-grids.html#kssref-grids-variables-rtl-zen-switch-direction).\n// $rtl-selector       = $zen-rtl-selector - The RTL selector for this grid item. See the docs for [`$zen-rtl-selector`](section-grids.html#kssref-grids-variables-rtl-zen-rtl-selector).\n//\n// weight: 10\n//\n// Style guide: undo.undo-zen-grid-item-base\n@mixin undo-zen-grid-item-base(\n  $gutters            : $zen-gutters,\n  $gutter-method      : $zen-gutter-method,\n  $box-sizing         : $zen-box-sizing,\n  $direction          : $zen-direction,\n  $switch-direction   : $zen-switch-direction,\n  $rtl-selector       : $zen-rtl-selector\n) {\n\n  // Specify the padding if the gutter method uses padding.\n  @if $gutter-method == padding {\n    @include undo-zen-apply-gutter-padding($gutters, $direction, $switch-direction, $rtl-selector);\n  }\n\n  // Specify the border-box properties.\n  @if $box-sizing == border-box {\n    -moz-box-sizing: content-box;\n    -webkit-box-sizing: content-box;\n    box-sizing: content-box;\n  }\n\n  @if zen-support-for-ie(7) {\n    @if $box-sizing-polyfill-path != \"\" {\n      *behavior: none;\n    }\n    @if zen-support-for-ie(6) {\n      _display: block;\n      _overflow: visible;\n    }\n    *word-wrap: normal;\n  }\n}\n\n// undo-zen-new-row()\n//\n// Apply this to prevent a grid item from starting a new row by undoing the styling applied with [`zen-new-row()`](section-grids.html#kssref-grids-zen-new-row).\n//\n// Common usage:\n// ```\n// @include undo-zen-new-row();\n// ```\n// or:\n// ```\n// @include undo-zen-new-row(right);\n// ```\n//\n// $clear             = $zen-direction - The clearing direction to use for this grid item. See the docs for [`$zen-direction`](section-grids.html#kssref-grids-variables-rtl-zen-direction).\n// $rtl-selector      = $zen-rtl-selector - The RTL selector for this grid item. See the docs for [`$zen-rtl-selector`](section-grids.html#kssref-grids-variables-rtl-zen-rtl-selector).\n//\n// Style guide: undo.undo-zen-new-row\n@mixin undo-zen-new-row(\n  $clear              : $zen-direction,\n  $rtl-selector       : $zen-rtl-selector\n) {\n  clear: none;\n\n  @if $clear == left or $clear == right {\n    @include zen-rtl($rtl-selector) {\n      clear: none;\n    }\n  }\n}\n\n// undo-zen-apply-gutter-padding()\n//\n// Undoes the gutter on a grid item when using the padding gutter method. Apply this to undo the gutter padding styles applied with [`zen-apply-gutter-padding()`](section-grids.html#kssref-grids-zen-apply-gutter-padding).\n//\n// Common usage:\n// ```\n// @include undo-zen-apply-gutter-padding();\n// ```\n//\n// $gutters            = $zen-gutters - The width of the gutters for this grid item. See the docs for [`$zen-gutters`](section-grids.html#kssref-grids-variables-zen-gutters).\n// $direction          = $zen-direction - The direction to use for this grid item. See the docs for [`$zen-direction`](section-grids.html#kssref-grids-variables-rtl-zen-direction).\n// $switch-direction   = $zen-switch-direction - Whether to switch the default direction for this grid item. See the docs for [`$zen-switch-direction`](section-grids.html#kssref-grids-variables-rtl-zen-switch-direction).\n// $rtl-selector       = $zen-rtl-selector - The RTL selector for this grid item. See the docs for [`$zen-rtl-selector`](section-grids.html#kssref-grids-variables-rtl-zen-rtl-selector).\n//\n// weight: 15\n//\n// Style guide: undo.undo-zen-apply-gutter-padding\n@mixin undo-zen-apply-gutter-padding(\n  $gutters            : $zen-gutters,\n  $direction          : $zen-direction,\n  $switch-direction   : $zen-switch-direction,\n  $rtl-selector       : $zen-rtl-selector\n) {\n\n  $dir: $direction;\n  @if $switch-direction {\n    $dir: zen-direction-switch($dir);\n  }\n\n  padding: {\n    left: 0;\n    right: 0;\n  }\n\n  // If $gutters is an odd number of pixels, we need special RTL handling.\n  @if zen-half-gutter($gutters, left, $dir) != zen-half-gutter($gutters, right, $dir) {\n    @include zen-rtl($rtl-selector) {\n      padding: {\n        left: 0;\n        right: 0;\n      }\n    }\n  }\n}\n","$mobile: \"screen and (max-width: 640px)\";\n$mobile-up: \"screen and (min-width: 640px)\";\n$desktop-up: \"screen and (min-width: 1080px)\";\n\n.visible {\n  visibility: visible;\n}\n\n.invisible {\n  visibility: hidden;\n}\n\n\nbody {\n  margin: 0;\n  background: url('../images/fullbg-tiny.png') black;\n  background-size: cover;\n  // font-family: 'Cutive Mono', monospace;\n  font-family: 'Source Code Pro', monospace;\n  height: 100vh;\n}\n\n.container {\n  margin-right: 20px;\n}\n\n#title-banner-wrap {\n  margin-right: 100px;\n  position: relative;\n  left: 0px;\n\n  #title-banner-text {\n    margin-left: 40px;\n    padding: 25px 35px 20px 35px;\n\n    @media #{$mobile-up} {\n      padding-top: 35px;\n    }\n\n    h1 {\n      font-family: 'Autopia-Regular', Georgia, serif;\n      color: white;\n      position: relative;\n      padding: 10px;\n      background: url('../images/title-box.svg');\n      background-repeat: no-repeat;\n      margin-top: 0;\n      margin-bottom: 0;\n\n      // @media #{$mobile-up} {\n      //   padding: 20px;\n      // }\n    }\n  }\n}\n\n/////////// Grid\n// TODO: add media queries to stack blocks when necessary\n$zen-columns: 9;\n$zen-gutters: 0px;\n#hud-wrapper {\n  color: white;\n  position: relative;\n  height: 70vh;\n  left: 0;\n  padding-left: 0px;\n  padding-right: 0px;\n  margin-left: 75px;\n  margin-right: 100px;\n  border: 3px solid white;\n  overflow: scroll;\n  @include zen-grid-container();\n\n  @media #{$mobile} {\n    margin-right: 10px;\n\n  }\n\n  #status-panel {\n    @include zen-grid-item(3, 1, left);\n    height: 66.6%;\n    background-color: rgba(255, 255, 255, 0.7);\n    position: relative;\n    &::after {\n      content: \"\";\n      position: absolute;\n      bottom: 0;\n      left: 0;\n      width: 100%;\n      height: 3px;\n      background-image: linear-gradient(to right, rgba(255,191,222,1) 0%, rgba(235,214,252,1) 35%, rgba(188,224,238,1) 68%, rgba(204,255,241,1) 97%, rgba(204,255,241,1) 100%);\n    }\n  }\n  #sentences-panel {\n    @include zen-grid-item(6, 1, right);\n    background-color: rgba(0, 0, 0, 0.6);\n\n    height: calc(100% - 60px);\n  }\n  #record-panel {\n    @include zen-new-row(left);\n    @include zen-grid-item(3, 1, left);\n    height: 33.4%;\n    position: absolute;\n    bottom: 0;\n    background-color: rgba(255, 255, 255, 0.9);\n  }\n}\n\n// Show rainbow border only if both gum and speech recognition are around\n.getusermedia.speechrecognition #sentences-panel {\n  &::after {\n    content: \"\";\n    position: absolute;\n    left: 33.333%;\n    top: 0;\n    height: 100%;\n    width: 3px;\n    background-image: linear-gradient(to bottom, rgba(255,191,222,1) 0%, rgba(235,214,252,1) 35%, rgba(188,224,238,1) 68%, rgba(204,255,241,1) 97%, rgba(204,255,241,1) 100%);\n  }\n}\n\n\n\n// If either no WebSpeechAPI or speech recognition, just show sentences panel full-width\n.no-getusermedia #hud-wrapper, .no-speechrecognition #hud-wrapper {\n  #sentences-panel {\n    @include zen-grid-item(9, 1, left);\n  }\n}\n","nav#navbar {\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 40px;\n  height: 100%;\n  overflow: hidden;\n  z-index: 9000;\n  background: url('../images/textural-tiny.jpg');\n  background-size: cover;\n  // cursor: pointer;\n\n  // Animate folding out navbar\n  transition: all 0.5s ease-in-out;\n  &.expanded {\n    // full screen minus distance from right side to hudbox right border\n    width: calc(100% - 120px);\n    cursor: pointer;\n\n    //Hide question mark when expanded on mobile\n    @media #{$mobile} {\n      width: calc(100% - 30px);\n      margin-left: auto;\n      // #navbar-header {\n      //   opacity: 0;\n      // }\n    }\n  }\n\n  a {\n    text-decoration: none;\n    color: black;\n  }\n\n  #navbar-header  {\n    position: absolute;\n    top: 45%;\n    transform: rotate(-90deg);\n    -webkit-transform: rotate(-90deg);\n    // -webkit-transform: translateY(-50%) rotate(-90deg);\n\n    // Animate ? coming in and out\n    opacity: 1;\n    transition: all 1s ease-in-out;\n\n\n\n    a#what, a#how {\n      transform: translateY(65%);\n      -webkit-transform: translateY(65%);\n      font-family: 'Autopia-Regular', Georgia, serif;\n      font-size: 24px;\n      position: absolute;\n      &:hover, &:focus {\n        opacity: 0.4;\n      }\n    }\n\n    a#what {\n      left: 0;\n    }\n\n    a#how {\n      left: 75px;\n    }\n\n    @media #{$mobile} {\n      // h2#main-header {\n      //   display: none;\n      // }\n      left: -10px; //hack!\n    }\n    @media #{$mobile-up} {\n      // h2#mobile-header {\n      //   display: none;\n      // }\n\n      margin-top: 35px;\n      margin-left: -11px;\n    }\n  }\n\n  // Shouldn't need all the prefixes here cuz we have a gulp task adding them\n  .navbar-content {\n    position: absolute;\n    padding: 40px;\n    opacity: 0;\n    pointer-events: none;\n    text-shadow: 2px 2px 2px #222;\n    color: white;\n\n    ol {\n      padding-left: 0;\n\n      li {\n        margin: 0 0 10px 0;\n      }\n    }\n\n\n    // Animate fading in and out navbar content\n    transition: all 0.3s ease-in-out;\n    &.showing {\n      opacity: 1;\n    }\n\n    #no-record {\n      background-color: rgba(0, 0, 0, 0.13);\n      border-radius: 5px;\n    }\n\n    @media #{$mobile} {\n      font-size: 16px;\n      left: 0;\n    }\n    @media #{$mobile-up} {\n      font-size: 17px;\n      left: 50%;\n      top: 50%;\n      transform: translateY(-50%) translateX(-50%);\n      -webkit-transform: translateY(-50%) translateX(-50%);\n      max-width: 50%;\n    }\n    @media #{$desktop-up} {\n      max-width: 30%;\n      font-size: 19px;\n    }\n\n    &#navbar-content-how {\n      left: 38px;\n      font-size: 14px;\n      padding-top: 10px;\n\n\n      p {\n        padding-bottom: 10px;\n      }\n\n\n\n      @media #{$mobile-up} {\n        padding-top: 20px;\n        font-size: 15px;\n        left: 50%;\n        max-width: 80%;\n      }\n      @media #{$desktop-up} {\n        font-size: 17px;\n        max-width: none;\n      }\n    }\n\n  }\n}\n","#record-panel {\n  height: 300px;\n  overflow: visible;\n  padding-top: 15px;\n  padding-bottom: 15px;\n  color: black;\n\n  #record {\n    img {\n      width: 60px;\n      height: 60px;\n      position: absolute;\n      left: 20px;\n      bottom: 20px;\n      cursor: pointer;\n      &:hover, &:focus {\n        opacity: 0.8;\n      }\n      &.ready {\n        animation: pulse 0.8s infinite ease-in-out alternate;\n      }\n      &.active {\n        animation: spin 1.0s linear infinite;\n        cursor: not-allowed;\n      }\n      &.waiting {\n        cursor: not-allowed;\n        opacity: 0.5;\n      }\n    }\n\n\n  }\n\n  #speech-results {\n    font-size: larger;\n    padding-left: 10px;\n    padding-right: 10px;\n    margin-top: 0;\n    #who {\n      // text-decoration: underline wavy black;\n    }\n  }\n}\n\n// Don't display record panel if no speech recognition or microphone\n.no-getusermedia #record-panel, .no-speechrecognition #record-panel {\n  display: none;\n}\n\n// Keyframes for animations cannot be nested\n@keyframes pulse {\n  0% {\n    transform: scale(1.0);\n  }\n  100% {\n    transform: scale(1.2);\n  }\n}\n\n@keyframes spin {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n","#sentences-panel {\n  // height: 500px;\n  overflow: scroll;\n  // padding-left: 40px;\n  // padding-right: 40px;\n  padding-bottom: 220px;\n  #sentences-panel-content {\n    // hack to restore background of panel\n    &:before {\n      content: \"\";\n      position: absolute;\n      width: calc(66.6% - 3px);\n      height: 61px;\n      bottom: 0;\n      background-color: rgba(0,0,0,0.6);\n      pointer-events: none;\n      z-index: 0;\n      @media #{$mobile-up} {\n        height: 60px;\n      }\n\n\n    }\n\n    //try fading text down by putting a pseudoelement with gradient over it\n    &:after {\n      content: \"\";\n      width: calc(66.6% - 3px); // leave rainbow border intact!\n      height: 30%;\n      position: absolute;\n      // top: calc(75% - 50px);\n      top: 70%;\n      right: 0;\n      // background: green;\n      background-image: linear-gradient(to bottom, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.7));\n      z-index: 10;\n      pointer-events: none; // let people click the sentences through this overlay\n    }\n    ul#sentences-list {\n      list-style: none;\n      font-size: 1.2em;\n      font-weight: 300;\n      padding-right: 50px;\n      @media #{$mobile-up} {\n        padding-right: 180px;\n      }\n\n      li {\n        margin: 0 0 25px 0;\n      }\n      li.sentence {\n        cursor: pointer;\n        &:hover, &:focus {\n          background: linear-gradient(to left, rgba(255, 255, 255, 0), rgba(255, 255, 255, 0.6));\n        }\n        &.playing {\n          background: linear-gradient(to left, rgba(255, 255, 255, 0), rgba(113, 184, 184, 0.6));\n        }\n        &.being-input {\n          // cursor that looks like it's being typed\n          span.blinking-cursor-you {\n            font-weight: 700;\n            animation: 1s blink-red step-end infinite;\n            -webkit-animation: 1s blink-red step-end infinite;\n          }\n          span.blinking-cursor-friend {\n            font-weight: 700;\n            animation: 1s blink-blue step-end infinite;\n            -webkit-animation: 1s blink-blue step-end infinite;\n          }\n        }\n        &.ng-enter {\n          transition: 0.3s linear all;\n          opacity: 0;\n        }\n        &.ng-enter.ng-enter-active {\n          opacity: 1;\n        }\n      }\n    }\n\n    #playback-controls {\n      position: fixed;\n      right: 40px;\n      z-index: 100;\n      top: calc(95px + 70vh);\n\n      img {\n        width: 30px;\n        height: 30px;\n        margin: 0;\n        position: absolute;\n        bottom: 0;\n        right: 0;\n        &:hover {\n          opacity: 0.6;\n        }\n      }\n\n      @media #{$mobile-up} {\n        // height above header + height of hudbox\n        // top: calc(115px + 70vh);\n        right: 140px;\n      }\n    }\n\n    #new-entries {\n      position: fixed;\n      // right: calc(130px + 25%);\n      right: calc(50px + 43%);\n      z-index: 100;\n      top: calc(95px + 70vh);\n      cursor: pointer;\n      opacity: 0;\n      // opacity: 1; // just for layout!\n\n      @media #{$mobile-up} {\n        right: calc(120px + 32%);\n      }\n\n      &.visible {\n        opacity: 1;\n      }\n      &.pulsing {\n        opacity: 1;\n        animation: 0.8s pulse-button linear infinite;\n        -webkit-animation: 0.8s pulse-button linear infinite;\n      }\n\n\n      img {\n        width: 100px;\n        // height: 50px;\n        margin: 0;\n        position: absolute;\n        bottom: 0;\n        left: 0;\n        &:hover {\n          opacity: 0.6;\n        }\n      }\n    }\n  }\n}\n\n// If no getUserMedia / speech recognition, just show sentences panel full-width\n// Has to be \"or\" because firefox has getUserMedia but no speech recognition\n.no-getusermedia #sentences-panel, .no-speechrecognition #sentences-panel {\n  ul#sentences-list {\n    padding-left: 20px;\n    padding-right: 20px;\n  }\n\n  // When other panels are disabled and sentences panel is wider, make sure the\n  // gradient overlay is matched up to the new width\n  #sentences-panel-content:after, #sentences-panel-content:before {\n    width: calc(100% - 3px);\n  }\n}\n\n\n// Should abstract this into a sass function, for now just makin it happen\n@keyframes \"blink-red\" {\n  from, to {\n    color: transparent;\n  }\n  50% {\n    color: #bb5656;\n  }\n}\n\n@-webkit-keyframes \"blink-red\" {\n  from, to {\n    color: transparent;\n  }\n  50% {\n    color: #bb5656;\n  }\n}\n\n@keyframes \"blink-blue\" {\n  from, to {\n    color: transparent;\n  }\n  50% {\n    color: #4F5E94;\n  }\n}\n\n@-webkit-keyframes \"blink-blue\" {\n  from, to {\n    color: transparent;\n  }\n  50% {\n    color: #4F5E94;\n  }\n}\n\n@keyframes \"pulse-button\" {\n  from, to {\n    opacity: 0;\n  }\n  50% {\n    opacity: 1;\n  }\n}\n\n@-webkit-keyframes \"pulse-button\" {\n  from, to {\n    opacity: 0;\n  }\n  50% {\n    opacity: 1;\n  }\n}\n","#status-panel {\n  color: black;\n  margin-left: -50px;\n  #status-panel-content {\n    ul#status-list {\n      list-style: none;\n      line-height: 2.0;\n      li {\n        font-size: 1.6em;\n        font-weight: 500;\n      }\n      li.waiting-status {\n\n      }\n      li.active-status {\n        // color: #71B8B8;\n        color: #4F5E94;\n        // text-shadow: 2px 2px 2px #222;\n      }\n    }\n    #current-message {\n      font-size: larger;\n      padding: 30px;\n    }\n  }\n}\n\n// Don't display record panel if no speech recognition or microphone\n.no-getusermedia #status-panel, .no-speechrecognition #status-panel {\n  display: none;\n}\n"],"names":[],"mappings":"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"}